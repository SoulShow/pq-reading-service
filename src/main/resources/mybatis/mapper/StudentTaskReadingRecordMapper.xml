<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.pq.reading.mapper.StudentTaskReadingRecordMapper" >
  <resultMap id="BaseResultMap" type="com.pq.reading.entity.StudentTaskReadingRecord" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="task_id" property="taskId" jdbcType="BIGINT" />
    <result column="chapter_id" property="chapterId" jdbcType="BIGINT" />
    <result column="user_album_id" property="userAlbumIId" jdbcType="BIGINT" />
    <result column="student_id" property="studentId" jdbcType="BIGINT" />
    <result column="class_id" property="classId" jdbcType="BIGINT" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="book_name" property="bookName" jdbcType="VARCHAR" />
    <result column="user_id" property="userId" jdbcType="VARCHAR" />
    <result column="voice_url" property="voiceUrl" jdbcType="VARCHAR" />
    <result column="img_url" property="imgUrl" jdbcType="VARCHAR" />
    <result column="teacher_id" property="teacherId" jdbcType="VARCHAR" />
    <result column="score" property="score" jdbcType="INTEGER" />
    <result column="play_count" property="playCount" jdbcType="INTEGER" />
    <result column="is_private" property="isPrivate" jdbcType="INTEGER" />
    <result column="duration" property="duration" jdbcType="VARCHAR" />
    <result column="state" property="state" jdbcType="BIT" />
    <result column="created_time" property="createdTime" jdbcType="TIMESTAMP" />
    <result column="updated_time" property="updatedTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from pq_student_task_reading_record
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.pq.reading.entity.StudentTaskReadingRecord" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into pq_student_task_reading_record (task_id, student_id, user_id, 
      voice_url, img_url, score, play_count,class_id,
      state, created_time, updated_time, user_album_id,is_private,teacher_id,chapter_id,name,book_name,duration
      )
    values (#{taskId,jdbcType=BIGINT}, #{studentId,jdbcType=BIGINT}, #{userId,jdbcType=VARCHAR}, 
      #{voiceUrl,jdbcType=VARCHAR}, #{imgUrl,jdbcType=VARCHAR},#{score,jdbcType=INTEGER}, #{playCount,jdbcType=INTEGER},#{classId},
      #{state,jdbcType=BIT}, #{createdTime,jdbcType=TIMESTAMP}, #{updatedTime,jdbcType=TIMESTAMP},#{userAlbumIId},#{isPrivate},
    #{teacherId},#{chapterId},#{name},#{bookName},#{duration}
      )
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.pq.reading.entity.StudentTaskReadingRecord" >
    update pq_student_task_reading_record
    set task_id = #{taskId,jdbcType=BIGINT},
      student_id = #{studentId,jdbcType=BIGINT},
      user_id = #{userId,jdbcType=VARCHAR},
      voice_url = #{voiceUrl,jdbcType=VARCHAR},
      img_url = #{imgUrl},
      score = #{score,jdbcType=INTEGER},
      play_count = #{playCount,jdbcType=INTEGER},
      is_private = #{isPrivate},
      state = #{state,jdbcType=BIT},
      created_time = #{createdTime,jdbcType=TIMESTAMP},
      updated_time = #{updatedTime,jdbcType=TIMESTAMP},
      user_album_id = #{userAlbumIId},
      teacher_id = #{teacherId},
      chapter_id = #{chapterId},
      name = #{name},
      book_name = #{bookName},
      duration=#{duration},
      class_id = #{classId}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select id, task_id, student_id, user_id, voice_url, score, play_count, state, created_time, 
    updated_time, img_url, user_album_id,is_private,teacher_id,chapter_id,name,book_name,duration,class_id
    from pq_student_task_reading_record
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    select id, task_id, student_id, user_id, voice_url, score, play_count, state, created_time,
    updated_time, img_url,user_album_id,is_private,teacher_id,chapter_id,name,book_name,duration,class_id
    from pq_student_task_reading_record
  </select>

  <select id="selectCountByUserAlbumId" resultType="java.lang.Integer" >
    select count(id)
    from pq_student_task_reading_record
    where user_album_id = #{albumId}
    and student_id = #{studentId}
    and state = 1
  </select>

  <select id="selectByUserAlbumIdAndPrivate" resultMap="BaseResultMap" >
    select * from pq_student_task_reading_record
    where user_album_id = #{albumId}
    and is_private = #{isPrivate}
    and student_id = #{studentId}
    and state = 1
    order by created_time desc
    limit #{offset},#{size}
  </select>

  <select id="selectPrivateByUserIdAndStudentId" resultMap="BaseResultMap" >
    select * from pq_student_task_reading_record
    where state = 1
    and student_id = #{studentId}
    and user_id = #{userId}
    and is_private = 1
    order by created_time desc
  </select>

  <select id="selectByTaskIdAndStudentId" resultMap="BaseResultMap" >
    select * from pq_student_task_reading_record
    where state = 1
    and student_id = #{studentId}
    and task_id = #{taskId}
  </select>

  <select id="selectByChapterIdAndStudentList" resultMap="BaseResultMap" >
    select * from pq_student_task_reading_record r where r.play_count =
    (
    select max(play_count) as playCount
    from pq_student_task_reading_record
    where state = 1
    and chapter_id = #{chapterId}
    <if test="studentList !=null">
      and student_id in
      <foreach item="item" collection="studentList" separator="," open="(" close=")">#{item}</foreach>
    </if>
    and student_id = r.student_id
    group by playCount
    order by play_count desc ,created_time desc
    limit #{offset},#{size}
    )
    and r.state = 1
    and r.chapter_id = #{chapterId}
    <if test="studentList !=null">
      and r.student_id in
      <foreach item="item" collection="studentList" separator="," open="(" close=")">#{item}</foreach>
    </if>
    order by r.play_count desc ,r.created_time desc
    limit #{offset},#{size}
  </select>

  <select id="selectByTeacherUserIdAndStudentId" resultMap="BaseResultMap" >
    select * from pq_student_task_reading_record
    where state = 1
    and teacher_id = #{userId}
    <if test="studentList !=null">
      and student_id in
      <foreach item="item" collection="studentList" separator="," open="(" close=")">#{item}</foreach>
    </if>
    order by created_time desc
    limit #{offset},#{size}
  </select>

  <select id="selectByTaskId" resultMap="BaseResultMap" >
    select * from pq_student_task_reading_record
    where state = 1
    and task_id = #{taskId}
    order by created_time desc
  </select>

  <select id="selectByTeacherId" resultMap="BaseResultMap" >
    select id, task_id, student_id, user_id, voice_url, score, play_count, state, created_time,
    updated_time, img_url,user_album_id,is_private,teacher_id,chapter_id,name,book_name,duration,class_id
    from pq_student_task_reading_record
    where teacher_id = #{teacherId}
    and state = 1
  </select>

  <select id="selectCountByTaskId" resultType="java.lang.Integer" >
    select count(id)
    from pq_student_task_reading_record
    where task_id = #{taskId}
    and state = 1
  </select>

  <select id="selectCountByClassIdAndTeacherId" resultType="java.lang.Integer" >
    select count(id)
    from pq_student_task_reading_record
    where class_id = #{classId}
    and user_id = #{userId}
    and state = 1
  </select>
</mapper>