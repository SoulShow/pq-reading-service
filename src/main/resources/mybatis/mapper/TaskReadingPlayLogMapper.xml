<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.pq.reading.mapper.TaskReadingPlayLogMapper" >
  <resultMap id="BaseResultMap" type="com.pq.reading.entity.TaskReadingPlayLog" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="reading_record_id" property="readingRecordId" jdbcType="BIGINT" />
    <result column="chapter_id" property="chapterId" jdbcType="BIGINT" />
    <result column="student_id" property="studentId" jdbcType="BIGINT" />
    <result column="user_id" property="userId" jdbcType="VARCHAR" />
    <result column="created_time" property="createdTime" jdbcType="TIMESTAMP" />
  </resultMap>

  <resultMap id="CountResultMap" type="com.pq.reading.dto.RankingDto" >
    <result column="studentId" property="studentId" jdbcType="BIGINT" />
    <result column="count" property="count" jdbcType="INTEGER" />
    <result column="rankIndex" property="rankIndex" jdbcType="INTEGER" />

  </resultMap>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from pq_task_reading_play_log
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.pq.reading.entity.TaskReadingPlayLog" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into pq_task_reading_play_log (reading_record_id, user_id, created_time,chapter_id, student_id
      )
    values (#{readingRecordId,jdbcType=BIGINT}, #{userId,jdbcType=VARCHAR}, #{createdTime,jdbcType=TIMESTAMP},
    #{chapterId},#{studentId}
      )
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.pq.reading.entity.TaskReadingPlayLog" >
    update pq_task_reading_play_log
    set reading_record_id = #{readingRecordId,jdbcType=BIGINT},
      user_id = #{userId,jdbcType=VARCHAR},
      created_time = #{createdTime,jdbcType=TIMESTAMP},
      chapter_id = #{chapterId},
      student_id = #{studentId}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select id, reading_record_id, user_id, created_time,chapter_id,student_id
    from pq_task_reading_play_log
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    select id, reading_record_id, user_id, created_time,student_id,chapter_id
    from pq_task_reading_play_log
  </select>

  <select id="selectReadingCount" resultMap="CountResultMap" >
    select count(l.id) count,r.student_id studentId from pq_task_reading_play_log l, pq_student_task_reading_record r
    where l.reading_record_id = r.id
    and l.created_time &gt;=#{beginDate}
    and l.created_time &lt;=#{endDate}
    group by r.student_id
    order by count DESC
    <if test="type==1">
      limit 0,30
    </if>
    <if test="type==2">
      limit 0,10
    </if>
  </select>

  <select id="selectStudentReadingCountAndIndex" resultMap="CountResultMap" >
    select count,rankIndex from(
    select a.count as count,(@ranknum:=@ranknum+1) as rankIndex,a.studentId as studentId  from(
    select count(l.id) count,r.student_id studentId from pq_task_reading_play_log l, pq_student_task_reading_record r
    where l.reading_record_id = r.id
    and l.created_time &gt;=#{beginDate}
    and l.created_time &lt;=#{endDate}
    group by r.student_id
    order by count DESC
    <if test="type==1">
      limit 0,30
    </if>
    <if test="type==2">
      limit 0,10
    </if>) a,
    (
    select (@ranknum :=0) ) b
    ) c
    where c.studentId = #{studentId}
  </select>
</mapper>